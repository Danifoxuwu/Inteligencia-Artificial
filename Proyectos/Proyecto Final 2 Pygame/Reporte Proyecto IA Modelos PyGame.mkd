# Reporte Final: Implementación de Modelos de Inteligencia Artificial en PyGame para Esquivar Proyectiles

## Introducción

Este proyecto consiste en el desarrollo de un videojuego utilizando PyGame de la manera mas simple posible simulando lo que es un plataformero donde el personaje principal es Kirby, kirby debe esquivar proyectiles lanzados por enemigos, el objetivo principal es aplicar y comparar diferentes modelos de inteligencia artificial para automatizar el comportamiento de Kirby en diferentes situaciones, permitiendo que aprenda a esquivar los proyectiles de manera eficiente, para este proyecto se implementaron y evaluaron tres enfoques diferentes, en este caso se uso un modelo de una red neuronal, un árbol de decisión y un clasificador K-Nearest Neighbors.

## Desarrollo

### Descripción General del Juego

El juego simula un entorno donde Kirby debe esquivar dos tipos de proyectiles, uno lanzado por el suelo y otro lanzado desde el aire, el usuario puede controlar a Kirby manualmente o activar los modos automáticos obviamente despues de entrenarlos, el entorno fue diseñado para recolectar datos de las acciones y estados de Kirby, los cuales son utilizados para entrenar los modelos de IA y asi poder ver como se comporta cada uno de ellos.

### Recolección de Datos

Durante el juego, se recolectan datos relevantes en cada frame, tales cokmo:

- Posición de Kirby (x, y)
- Posición de los proyectiles (suelo y aire)
- Distancias relativas entre Kirby y los proyectiles
- Estado de salto y movimiento lateral
- Acción realizada (saltar, moverse a la izquierda, derecha o quedarse quieto)

Estos datos se almacenan en listas y pueden ser utilizados para entrenar los modelos de IA.

### Modelos de Inteligencia Artificial Implementados

#### 1. Red Neuronal (Neural Network)

Se implementó una red neuronal utilizando TensorFlow/Keras para dos tareas principales:

- **Decisión de salto:** La red toma como entrada características como la velocidad y distancia de los proyectiles, y decide si Kirby debe saltar.
- **Movimiento lateral:** Otra red neuronal predice si Kirby debe moverse a la izquierda, derecha o quedarse quieto, en función de la posición de los proyectiles y su propio estado.

La arquitectura de la red incluye varias capas densas con funciones de activación ReLU y sigmoid según la tarea que necesiten realizar,en el caso del movimiento lateral, la red neuronal tiene una sola salida con activación sigmoide y la decisión se toma aplicando umbrales: valores bajos indican izquierda, valores altos indican derecha, y valores intermedios indican quedarse quieto.

```python
def entrenar_modelo_kirby(datos_kirby):
    # ...preparación de datos...
    modelo_kirby = Sequential([
        Dense(32, input_dim=6, activation='relu'),
        Dense(32, activation='relu'),
        Dense(16, activation='relu'),
        Dense(1, activation='sigmoid')
    ])
    modelo_kirby.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    modelo_kirby.fit(X_train, y_train, epochs=100, batch_size=32, verbose=1)
    # ...evaluación...
    return modelo_kirby
```
*Este fragmento muestra la arquitectura de la red neuronal para la decisión de salto, utiliza capas densas y la función de activación sigmoid para salida binaria (saltar/no saltar).*

```python
def entrenar_movimiento_kirby(datos_movimiento_kirby):
    # ...preparación de datos...
    modelo_movimiento_kirby = Sequential([
        Dense(32, input_dim=8, activation='relu'),
        Dense(16, activation='relu'),
        Dense(1, activation='sigmoid')
    ])
    modelo_movimiento_kirby.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
    modelo_movimiento_kirby.fit(X_train, y_train, epochs=100, batch_size=32, verbose=1)
    # ...evaluación...
    return modelo_movimiento_kirby
```
*Aquí la salida es una sola neurona con activación sigmoide. Se interpreta la predicción usando umbrales: si el valor es menor a 0.4 Kirby se mueve a la izquierda, si es mayor a 0.6 se mueve a la derecha, y si está entre esos valores se queda quieto.*

#### 2. Árbol de Decisión (Decision Tree)

En el caso del arbol este se entrenó usando scikit-learn para ambas tareas (salto y movimiento lateral), el árbol aprende reglas simples basadas en los datos recolectados para tomar decisiones rápidas y explicables.

```python
def entrenar_arbol_salto_kirby(datos_kirby):
    arbol_salto = DecisionTreeClassifier(max_depth=6)
    arbol_salto.fit(X, y)
    return arbol_salto
```
*Este código entrena un árbol de decisión para la tarea de salto. El parámetro `max_depth` controla la profundidad máxima del árbol para evitar sobreajuste.*

#### 3. K-Nearest Neighbors (KNN)

El modelo KNN también se entrenó para ambas tareas, este modelo predice la acción de Kirby basándose en las acciones tomadas en situaciones similares previamente observadas, esto para obtener como tal un resultado a partir de lo realizado.

```python
def entrenar_knn_salto_kirby(datos_kirby, n_neighbors=3):
    knn_salto = KNeighborsClassifier(n_neighbors=n_neighbors)
    knn_salto.fit(X, y)
    return knn_salto
```
*Este fragmento muestra cómo se entrena un clasificador KNN para la decisión de salto. El parámetro `n_neighbors` indica cuántos vecinos considerar para la predicción.*

### Entrenamiento y Evaluación

Cada modelo requiere una cantidad mínima de muestras para ser entrenado (al menos 10 para la red neuronal y el árbol, y al menos k para KNN), el entrenamiento se realiza desde el menú del juego, y los resultados de precisión se muestran en consola.

Durante el juego, el usuario puede alternar entre los modos manual, automático (red neuronal), árbol de decisión y KNN, permitiendo comparar el desempeño de cada modelo en tiempo real.

### Interfaz y Funcionalidades

- **Menú principal:** Permite seleccionar el modo de juego y entrenar los modelos.
- **Visualización:** El juego muestra a Kirby, los enemigos y los proyectiles con sprites animados.
- **Pausa y recolección de datos:** El usuario puede pausar el juego y visualizar los datos recolectados para análisis posterior.
- **Reinicio y borrado de muestras:** Se puede reiniciar el juego y borrar las muestras recolectadas desde el menú.

### Integración de los Modelos en el Juego

Cada modelo puede ser seleccionado desde el menú del juego y se utiliza para tomar decisiones automáticas sobre el movimiento y el salto de Kirby. El usuario puede alternar entre los modos manual y automáticos para comparar el desempeño de cada modelo en tiempo real.

```python
if modo_auto_kirby:
    saltando, en_suelo_kirby = decidir_salto_kirby(...)
    kirby.x, pos_actual_kirby = decidir_movimiento_kirby(...)
elif modo_arbol_kirby:
    saltando, en_suelo_kirby = decidir_salto_kirby_arbol(...)
    kirby.x, pos_actual_kirby = decidir_movimiento_kirby_arbol(...)
elif modo_knn_kirby:
    saltando, en_suelo_kirby = decidir_salto_kirby_knn(...)
    kirby.x, pos_actual_kirby = decidir_movimiento_kirby_knn(...)
```
*Dependiendo del modo seleccionado, se utiliza el modelo correspondiente para controlar a Kirby.*

## Explicación de los Modelos

### Red Neuronal

- **Ventajas:** Capaz de aprender patrones complejos y generalizar a situaciones nuevas.
- **Desventajas:** Requiere más datos y tiempo de entrenamiento, menos interpretable.

### Árbol de Decisión

- **Ventajas:** Fácil de interpretar, rápido de entrenar y ejecutar.
- **Desventajas:** Puede sobreajustarse con pocos datos, menos robusto ante ruido.

### K-Nearest Neighbors

- **Ventajas:** Simple de implementar, no requiere entrenamiento explícito.
- **Desventajas:** Lento en predicción con muchos datos, sensible a la escala de las variables.

## Conclusión

En este caso este proyecto me ayudo a poder ver diferentes enfoques de IA en un entorno interactivo y visual, aqui observe que la red neuronal ofrece un mejor desempeño en situaciones complejas, mientras que el árbol de decisión y KNN pueden ser útiles en escenarios con reglas simples o pocos datos, la integración de estos modelos en PyGame demuestra la viabilidad de aplicar técnicas de aprendizaje automático en videojuegos y sistemas interactivos.

## Referencias

- [PyGame Documentation](https://www.pygame.org/docs/)
- [TensorFlow Keras Documentation](https://www.tensorflow.org/api_docs/python/tf/keras)
- [scikit-learn Documentation](https://scikit-learn.org/stable/documentation.html)

